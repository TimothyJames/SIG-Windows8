//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace DatumPrikker.UI
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_AddRequestButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.AddRequestButtonUserControl(); }

        private object Activate_1_AddAddressButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.AddAddressButtonUserControl(); }

        private object Activate_2_CancelButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.CancelButtonUserControl(); }

        private object Activate_3_DeleteAllAddressButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.DeleteAllAddressButtonUserControl(); }

        private object Activate_4_SignOutButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.SignOutButtonUserControl(); }

        private object Activate_5_HelpButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.HelpButtonUserControl(); }

        private object Activate_6_DeleteButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.DeleteButtonUserControl(); }

        private object Activate_7_SaveButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.SaveButtonUserControl(); }

        private object Activate_8_EditButtonUserControl() { return new global::DatumPrikker.UI.AppBarControls.EditButtonUserControl(); }

        private object Activate_9_DatePicker() { return new global::DatumPrikker.UI.Common.DateTimePicker.DatePicker(); }

        private object Activate_12_LayoutAwarePage() { return new global::DatumPrikker.UI.Common.LayoutAwarePage(); }

        private object Activate_13_AddressBook() { return new global::DatumPrikker.UI.Frames.AddressBook(); }

        private object Activate_14_Dashboard() { return new global::DatumPrikker.UI.Frames.Dashboard(); }

        private object Activate_18_AddAddress() { return new global::DatumPrikker.UI.Frames.New.AddAddress(); }

        private object Activate_19_AddRequest() { return new global::DatumPrikker.UI.Frames.New.AddRequest(); }

        private object Activate_20_Register() { return new global::DatumPrikker.UI.Frames.Register(); }

        private object Activate_21_Requests() { return new global::DatumPrikker.UI.Frames.Requests(); }

        private object Activate_22_MainPage() { return new global::DatumPrikker.UI.MainPage(); }

        private object Activate_23_HelpFlyout() { return new global::DatumPrikker.UI.SettingsFlyout.HelpFlyout(); }

        private object Activate_24_StandardFlyout() { return new global::DatumPrikker.UI.SettingsFlyout.StandardFlyout(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Int32":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Boolean":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "String":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Visibility":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Visibility));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "DatumPrikker.UI.AppBarControls.AddRequestButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.AddRequestButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_AddRequestButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.AddAddressButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.AddAddressButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_1_AddAddressButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.CancelButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.CancelButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_2_CancelButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.DeleteAllAddressButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.DeleteAllAddressButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_3_DeleteAllAddressButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.SignOutButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.SignOutButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_SignOutButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.HelpButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.HelpButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_5_HelpButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.DeleteButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.DeleteButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_6_DeleteButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.SaveButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.SaveButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_SaveButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.AppBarControls.EditButtonUserControl":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.AppBarControls.EditButtonUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_8_EditButtonUserControl;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Common.DateTimePicker.DatePicker":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Common.DateTimePicker.DatePicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_DatePicker;
                userType.AddMemberName("DisplayedDate");
                userType.AddMemberName("MaxYear");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("MinYear");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("DaylightSavingFlag");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("LeapYearFlag");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "System.DateTime":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.DateTime), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Common.LayoutAwarePage":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_LayoutAwarePage;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Frames.AddressBook":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Frames.AddressBook), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_13_AddressBook;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Frames.Dashboard":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Frames.Dashboard), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_14_Dashboard;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions), GetXamlTypeByName("Object"));
                userType.AddMemberName("Format");
                userType.AddMemberName("Pattern");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PatternErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsValid");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("NonEmptyErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("NumericErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SpecificLengthErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("MinLengthErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DefaultErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ValidationMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ValidationMessageVisibility");
                userType.AddMemberName("FormatValidationHandler");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("ValidBrush");
                userType.AddMemberName("InvalidBrush");
                userType.AddMemberName("MinLength");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.ValidationChecks":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Any", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.Any);
                userType.AddEnumValue("NonEmpty", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.NonEmpty);
                userType.AddEnumValue("Numeric", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.Numeric);
                userType.AddEnumValue("NonEmptyNumeric", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.NonEmptyNumeric);
                userType.AddEnumValue("SpecificLength", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.SpecificLength);
                userType.AddEnumValue("MinLength", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.MinLength);
                userType.AddEnumValue("MatchesRegexPattern", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.MatchesRegexPattern);
                userType.AddEnumValue("EqualsPattern", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.EqualsPattern);
                userType.AddEnumValue("IncludesLowercase", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.IncludesLowercase);
                userType.AddEnumValue("IncludesUppercase", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.IncludesUppercase);
                userType.AddEnumValue("IncludesDigits", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.IncludesDigits);
                userType.AddEnumValue("IncludesSymbol", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.IncludesSymbol);
                userType.AddEnumValue("NoDoubles", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.NoDoubles);
                userType.AddEnumValue("IsStrongPassword", global::WinRTXamlToolkit.Controls.Extensions.ValidationChecks.IsStrongPassword);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Frames.New.AddAddress":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Frames.New.AddAddress), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_18_AddAddress;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Frames.New.AddRequest":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Frames.New.AddRequest), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_19_AddRequest;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Frames.Register":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Frames.Register), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_20_Register;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.Frames.Requests":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.Frames.Requests), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_21_Requests;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.MainPage":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.MainPage), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_22_MainPage;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.SettingsFlyout.HelpFlyout":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.SettingsFlyout.HelpFlyout), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_23_HelpFlyout;
                xamlType = userType;
                break;

            case "DatumPrikker.UI.SettingsFlyout.StandardFlyout":
                userType = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DatumPrikker.UI.SettingsFlyout.StandardFlyout), GetXamlTypeByName("DatumPrikker.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_24_StandardFlyout;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_DatePicker_DisplayedDate(object instance)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            return that.DisplayedDate;
        }
        private void set_0_DatePicker_DisplayedDate(object instance, object Value)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            that.DisplayedDate = (global::System.DateTime)Value;
        }
        private object get_1_DatePicker_MaxYear(object instance)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            return that.MaxYear;
        }
        private void set_1_DatePicker_MaxYear(object instance, object Value)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            that.MaxYear = (global::System.Int32)Value;
        }
        private object get_2_DatePicker_MinYear(object instance)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            return that.MinYear;
        }
        private void set_2_DatePicker_MinYear(object instance, object Value)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            that.MinYear = (global::System.Int32)Value;
        }
        private object get_3_DatePicker_DaylightSavingFlag(object instance)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            return that.DaylightSavingFlag;
        }
        private void set_3_DatePicker_DaylightSavingFlag(object instance, object Value)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            that.DaylightSavingFlag = (global::System.Boolean)Value;
        }
        private object get_4_DatePicker_LeapYearFlag(object instance)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            return that.LeapYearFlag;
        }
        private void set_4_DatePicker_LeapYearFlag(object instance, object Value)
        {
            var that = (global::DatumPrikker.UI.Common.DateTimePicker.DatePicker)instance;
            that.LeapYearFlag = (global::System.Boolean)Value;
        }
        private object get_5_FieldValidationExtensions_Format(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetFormat((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_5_FieldValidationExtensions_Format(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetFormat((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.ValidationChecks)Value);
                    }
        private object get_6_FieldValidationExtensions_Pattern(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetPattern((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_6_FieldValidationExtensions_Pattern(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetPattern((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_7_FieldValidationExtensions_PatternErrorMessage(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetPatternErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_7_FieldValidationExtensions_PatternErrorMessage(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetPatternErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_8_FieldValidationExtensions_IsValid(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetIsValid((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_8_FieldValidationExtensions_IsValid(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetIsValid((global::Windows.UI.Xaml.DependencyObject)instance, (System.Boolean)Value);
                    }
        private object get_9_FieldValidationExtensions_NonEmptyErrorMessage(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetNonEmptyErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_9_FieldValidationExtensions_NonEmptyErrorMessage(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetNonEmptyErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_10_FieldValidationExtensions_NumericErrorMessage(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetNumericErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_10_FieldValidationExtensions_NumericErrorMessage(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetNumericErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_11_FieldValidationExtensions_SpecificLengthErrorMessage(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetSpecificLengthErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_11_FieldValidationExtensions_SpecificLengthErrorMessage(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetSpecificLengthErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_12_FieldValidationExtensions_MinLengthErrorMessage(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetMinLengthErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_12_FieldValidationExtensions_MinLengthErrorMessage(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetMinLengthErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_13_FieldValidationExtensions_DefaultErrorMessage(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetDefaultErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_13_FieldValidationExtensions_DefaultErrorMessage(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetDefaultErrorMessage((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_14_FieldValidationExtensions_ValidationMessage(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetValidationMessage((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_14_FieldValidationExtensions_ValidationMessage(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetValidationMessage((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_15_FieldValidationExtensions_ValidationMessageVisibility(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetValidationMessageVisibility((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_15_FieldValidationExtensions_ValidationMessageVisibility(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetValidationMessageVisibility((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Xaml.Visibility)Value);
                    }
        private object get_16_FieldValidationExtensions_FormatValidationHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetFormatValidationHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_16_FieldValidationExtensions_FormatValidationHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetFormatValidationHandler((global::Windows.UI.Xaml.DependencyObject)instance, (System.Object)Value);
                    }
        private object get_17_FieldValidationExtensions_ValidBrush(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetValidBrush((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_17_FieldValidationExtensions_ValidBrush(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetValidBrush((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Xaml.Media.Brush)Value);
                    }
        private object get_18_FieldValidationExtensions_InvalidBrush(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetInvalidBrush((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_18_FieldValidationExtensions_InvalidBrush(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetInvalidBrush((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Xaml.Media.Brush)Value);
                    }
        private object get_19_FieldValidationExtensions_MinLength(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.GetMinLength((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_19_FieldValidationExtensions_MinLength(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SetMinLength((global::Windows.UI.Xaml.DependencyObject)instance, (System.Int32)Value);
                    }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember xamlMember = null;
            global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "DatumPrikker.UI.Common.DateTimePicker.DatePicker.DisplayedDate":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DatumPrikker.UI.Common.DateTimePicker.DatePicker");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "DisplayedDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_DatePicker_DisplayedDate;
                xamlMember.Setter = set_0_DatePicker_DisplayedDate;
                break;
            case "DatumPrikker.UI.Common.DateTimePicker.DatePicker.MaxYear":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DatumPrikker.UI.Common.DateTimePicker.DatePicker");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "MaxYear", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_DatePicker_MaxYear;
                xamlMember.Setter = set_1_DatePicker_MaxYear;
                break;
            case "DatumPrikker.UI.Common.DateTimePicker.DatePicker.MinYear":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DatumPrikker.UI.Common.DateTimePicker.DatePicker");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "MinYear", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_DatePicker_MinYear;
                xamlMember.Setter = set_2_DatePicker_MinYear;
                break;
            case "DatumPrikker.UI.Common.DateTimePicker.DatePicker.DaylightSavingFlag":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DatumPrikker.UI.Common.DateTimePicker.DatePicker");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "DaylightSavingFlag", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DatePicker_DaylightSavingFlag;
                xamlMember.Setter = set_3_DatePicker_DaylightSavingFlag;
                break;
            case "DatumPrikker.UI.Common.DateTimePicker.DatePicker.LeapYearFlag":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DatumPrikker.UI.Common.DateTimePicker.DatePicker");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "LeapYearFlag", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DatePicker_LeapYearFlag;
                xamlMember.Setter = set_4_DatePicker_LeapYearFlag;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.Format":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "Format", "WinRTXamlToolkit.Controls.Extensions.ValidationChecks");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_5_FieldValidationExtensions_Format;
                xamlMember.Setter = set_5_FieldValidationExtensions_Format;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.Pattern":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "Pattern", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_6_FieldValidationExtensions_Pattern;
                xamlMember.Setter = set_6_FieldValidationExtensions_Pattern;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.PatternErrorMessage":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "PatternErrorMessage", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_7_FieldValidationExtensions_PatternErrorMessage;
                xamlMember.Setter = set_7_FieldValidationExtensions_PatternErrorMessage;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.IsValid":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "IsValid", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_8_FieldValidationExtensions_IsValid;
                xamlMember.Setter = set_8_FieldValidationExtensions_IsValid;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.NonEmptyErrorMessage":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "NonEmptyErrorMessage", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_9_FieldValidationExtensions_NonEmptyErrorMessage;
                xamlMember.Setter = set_9_FieldValidationExtensions_NonEmptyErrorMessage;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.NumericErrorMessage":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "NumericErrorMessage", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_10_FieldValidationExtensions_NumericErrorMessage;
                xamlMember.Setter = set_10_FieldValidationExtensions_NumericErrorMessage;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.SpecificLengthErrorMessage":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "SpecificLengthErrorMessage", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_11_FieldValidationExtensions_SpecificLengthErrorMessage;
                xamlMember.Setter = set_11_FieldValidationExtensions_SpecificLengthErrorMessage;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.MinLengthErrorMessage":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "MinLengthErrorMessage", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_12_FieldValidationExtensions_MinLengthErrorMessage;
                xamlMember.Setter = set_12_FieldValidationExtensions_MinLengthErrorMessage;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.DefaultErrorMessage":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "DefaultErrorMessage", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_13_FieldValidationExtensions_DefaultErrorMessage;
                xamlMember.Setter = set_13_FieldValidationExtensions_DefaultErrorMessage;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.ValidationMessage":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "ValidationMessage", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_14_FieldValidationExtensions_ValidationMessage;
                xamlMember.Setter = set_14_FieldValidationExtensions_ValidationMessage;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.ValidationMessageVisibility":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "ValidationMessageVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_15_FieldValidationExtensions_ValidationMessageVisibility;
                xamlMember.Setter = set_15_FieldValidationExtensions_ValidationMessageVisibility;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.FormatValidationHandler":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "FormatValidationHandler", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_16_FieldValidationExtensions_FormatValidationHandler;
                xamlMember.Setter = set_16_FieldValidationExtensions_FormatValidationHandler;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.ValidBrush":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "ValidBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_17_FieldValidationExtensions_ValidBrush;
                xamlMember.Setter = set_17_FieldValidationExtensions_ValidBrush;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.InvalidBrush":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "InvalidBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_18_FieldValidationExtensions_InvalidBrush;
                xamlMember.Setter = set_18_FieldValidationExtensions_InvalidBrush;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions.MinLength":
                userType = (global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FieldValidationExtensions");
                xamlMember = new global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlMember(this, "MinLength", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_19_FieldValidationExtensions_MinLength;
                xamlMember.Setter = set_19_FieldValidationExtensions_MinLength;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlSystemBaseType
    {
        global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::DatumPrikker.UI.DatumPrikker_UI_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


